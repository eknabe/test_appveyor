
image:
- Visual Studio 2017
# - macos
- Ubuntu1804


configuration: Release

platform: x64

before_build:
  - cmd: gitversion /l console /output buildserver  

skip_commits:
  message: /#skip_build/

max_jobs: 2


artifacts:
  - path: dummy.txt
    name: MyArtifact

on_success:
  - ps: |
      echo "hello global"
      if ($Env:APPVEYOR_REPO_TAG -eq $true)
      {
          echo "Deploy"
      }

for:
  -
    matrix:
      only:
        - image: Ubuntu1804
    init:
      - echo Ubuntu build script
      # - sh: >-
      #     sudo apt-get install -y libgl1-mesa-dev libxrandr-dev libxinerama-dev
          
    build_script:
      - sh: >-
          echo "First line"
      
          gcc main.cpp -o app
      
          echo "Third line"
    
    after_build:
      - sh: >-
          if [[ $APPVEYOR_REPO_COMMIT_MESSAGE = *#store_bins* ]] || [ "$APPVEYOR_REPO_TAG" == "true" ]; 
          then 
            echo "Store binary artifacts";
            echo "dummy content" > dummy.txt;
          else
            echo "Do not store binary artifacts";
          fi
          
    test_script:
      - echo This is my custom test script
      - ps: |
          python3 return_arg.py 0
          if ($lastExitCode -ne 0) {
             throw "test failed"
          }

    on_finish:
      - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))          
      
  -
    matrix:
      only:
        - image: Visual Studio 2017
        
    init:
      # - ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
            
    build_script:
    - ps: >-
        echo MinGW-w64 test
        git clone "https://github.com/esmini/esmini"
        cd esmini
        mkdir build
        cd build
        
        # Update MSYS2
        C:\msys64\usr\bin\bash -lc "pacman --noconfirm -Syuu"  # Core update (in case any core packages are outdated)
        C:\msys64\usr\bin\bash -lc "pacman --noconfirm -Syuu"  # Normal update

        # Then run your code
        $env:CHERE_INVOKING = 'yes'  # Preserve the current working directory
        $env:MSYSTEM = 'MINGW64'  # Start a 64 bit Mingw environment
        echo "cmake .. -G `"MinGW Makefiles`" -DCMAKE_BUILD_TYPE=ReleaseÂ´ncmake --build . --target install --config Release" > ci-build.sh
        C:\msys64\usr\bin\bash -lc "./ci-build.sh"
 
    after_build:
      - cmd:
          curl -L "https://downloads.fdossena.com/geth.php?r=mesa64-latest" -o mesa_win64.7z

          7z x mesa_win64.7z -omesa
            
          cp mesa/opengl32.dll esmini/bin/

          cp mesa/opengl32.dll esmini/buildVS2019_64_v141/EnvironmentSimulator/Unittest/Release
          
      - ps: |
          if ($Env:APPVEYOR_REPO_COMMIT_MESSAGE -match '#store_bins' -Or $Env:APPVEYOR_REPO_TAG -eq $true)
          {
            echo "Store binary artifacts"
            echo "dummy content"  | Out-File -Encoding ascii dummy.txt            
          }
          else
          {
            echo "Do not store binary artifacts"
          }

    test_script:
      - echo This is my custom test script
      - ps: |
          C:/Python38/python return_arg.py 0
          if ($lastExitCode -ne 0) {
             throw "test failed"
          }
    
    on_finish:
      - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
  -
    matrix:
      only:
        - image: macos

    init:
      - echo This is the macos build script
      - sh: curl -sflL 'https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-vnc.sh' | bash -e -
          
    build_script:
      - sh: >-
          echo building on Mac
          gcc main.cpp -o app

    after_build:
          if [[ $APPVEYOR_REPO_COMMIT_MESSAGE = *#store_bins* ]] || [ "$APPVEYOR_REPO_TAG" == "true" ]; 
          then 
            echo "Store binary artifacts";
            echo "dummy content" > dummy.txt;
          else
            echo "Do not store binary artifacts";
          fi

    test_script:
      - echo This is my custom test script
      - ps: |
          python3 return_arg.py 0
          if ($lastExitCode -ne 0) {
             throw "test failed"
          }

    on_finish:
     # - sh: export APPVEYOR_VNC_BLOCK=true
     # - sh: curl -sflL 'https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-vnc.sh' | bash -e -

#deploy:
  # - provider: GitHub
  #   tag: $(APPVEYOR_REPO_TAG_NAME)
  #   release: test_appveyor $(GitVersion_MajorMinorPatch) (build $(APPVEYOR_BUILD_NUMBER))
  #   description: 'Demo and binaries. For information about changes and new features see [release notes](https://github.com/esmini/esmini/blob/master/release_notes.md).'
  #   auth_token:
  #     secure: wKTE14vggGofMa87GvA3pLpShpKrkoFwaf50nFJsBu9JfTWsfqOE20skdO6Eg74u
  #   on:
  #      APPVEYOR_REPO_TAG: true       # deploy on tag push only

